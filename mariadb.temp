package deployment

import (
	"git.k3.acornsoft.io/msit-auto-ml/koreserv/pkg/deployment/domain/deployment"
	"git.k3.acornsoft.io/msit-auto-ml/koreserv/pkg/deployment/domain/model_replacement"
	"gorm.io/driver/mysql"
	"gorm.io/gorm"
)

// type RDBRepository struct {
// 	orders []orders.Order
// }

// func (m *RDBRepository) Save(orderToSave *orders.Order) error {
// 	for i, p := range m.orders {
// 		if p.ID() == orderToSave.ID() {
// 			m.orders[i] = *orderToSave
// 			return nil
// 		}
// 	}

// 	m.orders = append(m.orders, *orderToSave)
// 	return nil
// }

// func (m RDBRepository) ByID(id orders.ID) (*orders.Order, error) {
// 	for _, p := range m.orders {
// 		if p.ID() == id {
// 			return &p, nil
// 		}
// 	}

// 	return nil, orders.ErrNotFound
// }

func InitRepository() {

	db, err := gorm.Open(mysql.New(mysql.Config{
		DSN:                       "gorm:gorm@tcp(localhost:3306)/gorm?charset=utf8&parseTime=True&loc=Local", // data source name
		DefaultStringSize:         256,                                                                        // default size for string fields
		DisableDatetimePrecision:  true,                                                                       // disable datetime precision, which not supported before MySQL 5.6
		DontSupportRenameIndex:    true,                                                                       // drop & create when rename index, rename index not supported before MySQL 5.7, MariaDB
		DontSupportRenameColumn:   true,                                                                       // `change` when rename column, rename column not supported before MySQL 8, MariaDB
		SkipInitializeWithVersion: false,                                                                      // auto configure based on currently MySQL version
	}), &gorm.Config{})

	if err != nil {
		panic("Db 연결에 실패하였습니다.")
	}

	// 테이블 자동 생성
	db.AutoMigrate(&deployment.Deployment{}, &model_replacement.ModelReplacement{})

	// // 생성
	// db.Create(&Product{Code: "D42", Price: 100})

	// // 읽기
	// var product Product
	// db.First(&product, 1)                 // primary key기준으로 product 찾기
	// db.First(&product, "code = ?", "D42") // code가 D42인 product 찾기

	// // 수정 - product의 price를 200으로
	// db.Model(&product).Update("Price", 200)
	// // 수정 - 여러개의 필드를 수정하기
	// db.Model(&product).Updates(Product{Price: 200, Code: "F42"})
	// db.Model(&product).Updates(map[string]interface{}{"Price": 200, "Code": "F42"})

	// // 삭제 - product 삭제하기
	// db.Delete(&product, 1)

}
